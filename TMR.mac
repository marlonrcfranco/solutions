TMR(globalName,mostrarChaves,mostrarDados,mostrarNiveis,amount)	;	MR - 15/08/2019 - TESTES EM GERAL
	;
	;**********************************************************************
	;         .:: IMPRIME GLOBAL EM FORMA DE ÁRVORE (TreeView) ::.
	;              @MarlonFranco
	; do ^TMR(globalName,mostrarChaves,mostrarDados,mostrarNiveis,amount)
	; 
	; ╔════════════════╦═══════════════════════════════════╦═══════════╗
	; ║ Parâmetro      ║ Explicação                        ║ Default   ║
	; ╠════════════════╩═══════════════════════════════════╩═══════════╣
	; ║ globalName     │ Nome da Global entre aspas.       │           ║
	; ║                │  Exemplo: "^FTCL(50)"             │           ║
	; ║────────────────┼───────────────────────────────────┼───────────║
	; ║ mostrarChaves  │ Mostra em cada nodo a chave.      │ 1         ║
	; ║                │  0 ─ Não mostrar chave            │           ║
	; ║                │  1 ─ Mostrar chave completa       │           ║
	; ║                │  2 ─ Mostrar chave reduzida       │           ║
	; ║────────────────┼───────────────────────────────────┼───────────║
	; ║ mostrarDados   │ Mostra o conteúdo do nodo.        │ 0         ║
	; ║                │  0 ─ Não mostrar dados            │           ║
	; ║                │  1 ─ Mostrar dados                │           ║
	; ║────────────────┼───────────────────────────────────┼───────────║
	; ║ mostrarNiveis  │ Mostra o nível do nodo na árvore  │ 0         ║
	; ║────────────────┼───────────────────────────────────┼───────────║
	; ║ amount         │ Mostra apenas os primeiros "amout"│ -1        ║
	; ║                │ nodos da árvore.                  │           ║
	; ║                │  amount < 0 : Mostra tudo         │           ║
	; ╚════════════════════════════════════════════════════════════════╝
	;
	; MR - 22/08/2019
	;
	;**********************************************************************
	;
	new globalNoTFound
	;
	write:($get(globalName)="")!($get(globalName)="help") !,
	"      .:: IMPRIME GLOBAL EM FORMA DE ÁRVORE (TreeView) ::.",!,
	"          @MarlonFranco",!,
	" do ^TMR(globalName,mostrarChaves,mostrarDados,mostrarNiveis,amount)",!,
	"╔════════════════╦═══════════════════════════════════╦═══════════╗",!,
	"║ Parâmetro      ║ Explicação                        ║ Default   ║",!,
	"╠════════════════╩═══════════════════════════════════╩═══════════╣",!,
	"║ globalName     │ Nome da Global entre aspas.       │           ║",!,
	"║                │  Exemplo: ""^FTCL(50)""             │           ║",!,
	"║────────────────┼───────────────────────────────────┼───────────║",!,
	"║ mostrarChaves  │ Mostra em cada nodo a chave.      │ 2         ║",!,
	"║                │  0 ─ Não mostrar chave            │           ║",!,
	"║                │  1 ─ Mostrar chave completa       │           ║",!,
	"║                │  2 ─ Mostrar chave reduzida       │           ║",!,
	"║────────────────┼───────────────────────────────────┼───────────║",!,
	"║ mostrarDados   │ Mostra o conteúdo do nodo.        │ 0         ║",!,
	"║                │  0 ─ Não mostrar dados            │           ║",!,
	"║                │  1 ─ Mostrar dados                │           ║",!,
	"║────────────────┼───────────────────────────────────┼───────────║",!,
	"║ mostrarNiveis  │ Mostra o nível do nodo na árvore  │ 0         ║",!,
	"║────────────────┼───────────────────────────────────┼───────────║",!,
	"║ amount         │ Mostra apenas os primeiros ""amout""│ -1        ║",!,
	"║                │ nodos da árvore.                  │           ║",!,
	"║                │  amount < 0 : Mostra tudo         │           ║",!,
	"╚════════════════════════════════════════════════════════════════╝",!
	;
	quit:($get(globalName)="")!($get(globalName)="help")
	;
	set globalNotFound=($data(@globalName)=0)
	;
	write:globalNotFound !,
	"══════════════════════════════════════════════════════════════════",!,
	" ERRO: Nao foi possivel localizar a global """_globalName,"""",!,
	"  Dica: coloque o nome da global entre aspas. Ex: ""^FTCL(50,1)""",!,
	"══════════════════════════════════════════════════════════════════",!
	quit:globalNotFound
	kill globalNotFound
	;
	;---------------------
	; Set parameters to default value if not specified
	set:$get(mostrarChaves)="" mostrarChaves=2
	set:$get(mostrarDados)="" mostrarDados=0
	set:$get(mostrarNiveis)="" mostrarNiveis=0
	set:$get(amount)="" amount=-1
	;
	new count,p,end,end0,node,levelFilter,level,level0,distance,value,completeKey,actualKey,indent,hasNext
	new printedPointers
	;
	set p="│ ",count=0
	;
	set node=$query(@globalName)
	set level=$length(node,",")-1
	set level0=level
	set levelFilter=$length(globalName,",")-1
	set value=$get(@node)
	set completeKey=$piece($piece(node,"(",2),")",1)
	set completeKey=$$RemoveSpecialCharacter(completeKey,",")
	set actualKey=$piece(completeKey,",",*)
	set actualKey=$$RestoreSpecialCharacter(actualKey,",")
	set indent=""
	set hasNext=($order(@node)'="")
	set end=$select(hasNext:"├",1:"└")
	set end0=end
	;
	;---------------------
	; First node
	write !,globalName," ",$select(mostrarNiveis:"<"_(levelFilter)_">",1:"")
	if (level>=levelFilter) do
	. do:('$$ParentNodeExists(node)) PrintMissingNodes(mostrarChaves,mostrarDados,mostrarNiveis,amount,node,level,level0,value,completeKey,actualKey,.indent,hasNext,end,end0)
	. do PrintLine(mostrarNiveis,mostrarChaves,mostrarDados,node,indent,end,level,value,completeKey,actualKey)
	;
	;---------------------
	; Cycle through nodes
	for  set node=$query(@node) quit:(node="")!(count=amount)!((level<=levelFilter)&&(levelFilter'=0))  do
	. ;
	. set level=$length(node,",")-1
	. quit:(level<=levelFilter)&&(levelFilter'=0)
	. set value=$get(@node)
	. set completeKey=$piece($piece(node,"(",2),")",1)
	. set completeKey=$$RemoveSpecialCharacter(completeKey,",")
	. ;
	. set actualKey=$piece(completeKey,",",*)
	. set actualKey=$$RestoreSpecialCharacter(actualKey,",")
	. ;
	. set hasNext=($order(@node)'="")
	. set end=$select(hasNext:"├",1:"└")
	. ;
	. ;---------------------
	. ; Update indent
	. ; 
	. set:(level>level0)&&(end0="├") indent=indent_$$Repeat((level-level0),p)
	. set:(level>level0)&&(end0'="├") indent=indent_$$Repeat((level-level0),"  ")
	. set:(level<level0) indent=$$Remove(indent,p,(level0-level))
	. ;
	. ;---------------------
	. ; Print line
	. ; 
	. do:('$$ParentNodeExists(node)) PrintMissingNodes(mostrarChaves,mostrarDados,mostrarNiveis,amount,node,level,level0,value,$$RestoreSpecialCharacter(completeKey,","),actualKey,.indent,hasNext,end,end0)
	. do PrintLine(mostrarNiveis,mostrarChaves,mostrarDados,node,indent,end,level,value,$$RestoreSpecialCharacter(completeKey,","),actualKey)
	. ;
	. set count=count+1
	. ;
	. ;---------------------
	. ; Update variables from previous level
	. set:(level0'=level) level0=level
	. set end0=end
	. ;
	write !
	;---------------------
	; End
	quit
	;
	;
	;*************************************************
	; Print the line with one node from the tree
	; MR - 23/08/2019
	;*************************************************
PrintLine(mostrarNiveis,mostrarChaves,mostrarDados,node,indent,end,level,value,completeKey,actualKey,pointer)	;
	;
	new ball
	;
	set:$get(pointer)="" pointer=0
	;
	set ball=$select(pointer:"×",1:"o")
	;
	write !," ",indent
	write end
	write $$Repeat(1,"─")
	write ball_$select(mostrarNiveis:"<"_(level+1)_">",1:"")
	write $case(mostrarChaves,1:"("_completeKey_") ",2:"("_actualKey_") ",:"")
	write:mostrarDados $extract(value,1,55)_$select($length(value)>56:"...",1:"")
	;
	quit
	;
	;
	;*************************************************
	; Print all the nodes that are pointers (i.e. those that do not exists but have children)
	; MR - 23/08/2019
	;*************************************************
PrintMissingNodes(mostrarChaves,mostrarDados,mostrarNiveis,distance,node,level,level0,value,completeKey,actualKey,indent,hasNext,end,end0)
	;
	new i,n,key,no,delim
	;
   	set delim=","
 	set indent=""
 	;
   	set n=$length(completeKey,delim)
  	;
  	for i=1:1:n do
   	. ;
   	. set key=$piece(completeKey,delim,1,i)
   	. ;
   	. set actualKey=$piece(completeKey,delim,i)
   	. ;
   	. set no=$piece(node,"(",1)_"("_key_")"
   	. ;
   	. set level=$length(no,",")-1
	. set value=""
	. ;
	. set hasNext=($order(@no)'="")
	. set end=$select(hasNext:"├",1:"└")
   	. ;
   	. ;---------------------
   	. ; Update indent
   	. set:(level>level0)&&(end0="├") indent=indent_$$Repeat((level-level0),p)
	. set:(level>level0)&&(end0'="├") indent=indent_$$Repeat((level-level0),"  ")
	. set:(level<level0) indent=$$Remove(indent,p,(level0-level))
	. ;
	. if ($data(@no)=10)&&('$$PointerAlreadyPrinted(key)) do
   	. . ;
   	. . ;---------------------
	. . ; Print line
	. . ; 
   	. . do PrintLine(mostrarNiveis,mostrarChaves,mostrarDados,node,indent,end,level,value,key,actualKey,1)
   	. . set printedPointers(key)=""
   	. . ;
	. ;
   	. ;---------------------
   	. ; Update variables from previous level
	. set:(level0'=level) level0=level
	. set end0=end
	;
	quit
	;
	;
	;*************************************************
	; Returns 1 if the parent node exists
	; MR - 23/08/2019
	;*************************************************
ParentNodeExists(node)	;
	;
	new completeKey,key,delim,n,parentNode,level
	;
	set delim=","
	;
	set completeKey=$piece($piece(node,"(",2),")",1)
	set completeKey=$$RemoveSpecialCharacter(completeKey,delim)
	;
   	set n=$length(completeKey,delim)
	;
	set:(n-1)>0 key=$piece(completeKey,delim,1,n-1)
	set:(n-1)<=0 key=0
   	;
   	set:key>0 parentNode=$piece(node,"(",1)_"("_$$RestoreSpecialCharacter(key,delim)_")"
   	set:key<=0 parentNode=$piece(node,"(",1)
	;
	;w "*ck:(",completeKey,")*k:(",key,") "
	;w "parent: "_parentNode
	;
	quit (($data(@parentNode)'=10)&&($data(@parentNode)'=0))
	;
	;
	;*************************************************
	; Returns 1 if the pointer has already been printed before
	; MR - 23/08/2019
	;*************************************************
PointerAlreadyPrinted(pointerKey)	;
	;
	quit (($data(printedPointers(pointerKey))'=10)&&($data(printedPointers(pointerKey))'=0))
	;
	;
	;*************************************************
	; Returns the string with "n" times "ch"
	; MR - 23/08/2019
	;*************************************************
Repeat(n,ch)	;
	new i,string 
	set string=""
	;
	set:(n>0)&&(n<1) n=1
	set:(n<0) n=1
	;
	for i=1:1:n do
	. ;
	. set string=string_ch
	. ;
	quit string
	;
	;
	;*************************************************
	; Removes from "string" the "n" occurences of "ch"
	; MR - 23/08/2019
	;*************************************************
Remove(string,ch,n)	;
	new i
	;
	set:(n>0)&&(n<1) n=1
	set:(n<0) n=0
	;
	for i=1:1:n do
	. ;
	. set string=$extract(string,1,($length(string)-$length(ch)))
	. ;
	;
	quit string
	;
	;
	;*************************************************
	; Returns the distance between "n1" and "n2" in one dimension
	; MR - 23/08/2019
	;*************************************************
Distance(n1,n2)	;
	;
	quit ($ZSQR($ZPOWER((n1-n2),2)))
	;
	;
	;*************************************************
	; RemoveSpecialCharacter
	; 
	; MR - 26/08/2019
	;*************************************************
	;
	; Replace all the commas (or special character) that are not from the key,
	; inside strings between ""
	; 
	; Example: 
	; 
	;        1    2       3      4              5         6   7   8 
	;       ├─┼────────┼────┼────────┼───────────────────┼─┼─────┼─┤
	; key=   1,"Brasil","SP","Iguape","Rua do Centro,720",2,"End",7
	; 
	; In this example, the comma (,) is used to separate the values in the key, 
	; but is also present inside onde of the values (the value 5).
	; 
	; If we attempt to do a $piece to separate the values using comma, we get:
	; 
	; $piece(key,",",1): 1
	; $piece(key,",",2): "Brasil"
	; $piece(key,",",3): "SP"
	; $piece(key,",",4): "Iguape"
	; $piece(key,",",5): "Rua do Centro (INCORRECT)
	; $piece(key,",",6): 720" (INCORRECT)
	; $piece(key,",",7): 2
	; $piece(key,",",8): "End"
	; $piece(key,",",9): 7
	; 
	; -------
	; Usage:
	; 
	; set key="1,""Brasil"",""SP"",""Iguape"",""Rua do Centro,720"",2,""End"",7"
	;
	; set key2=$$RemoveSpecialCharacter(key,",")
	;
	;for i=1:1:$length(key2,",") do
	;. write $$RestoreSpecialCharacter($piece(key2,",",i)),!
	; 
RemoveSpecialCharacter(key,specialChar)
	;
	new i,delim,key2,word
	;
	set:($data(specialChar)=0) specialChar=","
	;
	quit:$length(key,"""")<=1 key
	;
	set delim="|$%DeLimiTer%$|"
	set key2=""
	;
	set key=$replace(key,""""_specialChar,""""_delim)
	set key=$replace(key,specialChar_"""",delim_"""")
	;
	;---------------------
	; Replace all the commas (or special character) that are not from the key,
	; inside strings between ""
	for i=1:1:$length(key,delim) do
	. set word=$piece(key,delim,i)
	. set word=$replace(word,specialChar,"|$%CommA%$|")
	. set key2=key2_$select(key2'="":specialChar,1:"")_word
	;
	set key=key2
	;
	quit key2
	;
	;
	;*************************************************
	; RestoreSpecialCharacter
	; 
	; MR - 26/08/2019
	;*************************************************
	;
	; Replace all the "|$%CommA%$|" for specialChar
RestoreSpecialCharacter(string,specialChar)
	;
	set:($data(specialChar)=0) specialChar=","
	;
	quit $replace(string,"|$%CommA%$|",specialChar)
	;
	;
Teste	;
	set key="1,""Brasil"",""SP"",""Iguape"",""Rua do Centro,720"",2,""End"",7"
	;
	set key2=$$RemoveSpecialCharacter(key,",")
	;
	write !,"key2= ",key2,!!
	;
	for i=1:1:$length(key2,",") do
	. write $$RestoreSpecialCharacter($piece(key2,",",i)),!
	;
	;
	quit
	;
	;
	;
